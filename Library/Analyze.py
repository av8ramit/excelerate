####################################################################################################################################################  
#                                                                                                                                                  #
# This file has been generated by Kevin Koh:                                                                                                       #
#     Created by              : Kevin Koh                                                                                                          #    
#     Created on              : 15-02-2014                                                                                                         #
#     Directory               : /Library/                                                                                                          #
#     Purpose                 : This file will perform analysis on user test scores                                                                #
#                                                                                                                                                  #
####################################################################################################################################################

from Values import *
from Key import *
from Scored import *
from Summary import *
from Data import *
from Graph import *
import math
import csv

#Main analytics runner
class Analyze(object):

	#This is the default constructor
	def __init__(self):
		self.dataSet = [] # List of data values
		self.debug = False

	def setDebug(self, status):
		self.debug = status

	def importData(self, data):
		self.dataSet.append(data)

	def runMissVariance():
		

	def missVariance(self, type):
		dataDict = getSectionInfo(type):
		meanDict = {}
		totalMean = 0
		for typeNum in dataDict.keys():
			sumType = 0
			for x in dataDict[typeNum]:
				sumType += x
			mean = sumType/len(dataDict[typeNum])
			meanDict[typeNum] = mean
			totalMean += mean
		totalMean = totalMean/len(dataDict.keys())
		var = 0
		for key in meanDict.keys():
			var += pow(totalMean - meanDict[key], 2)
		var = var/len(meanDict.keys())
		standardDev = sqrt(var)
		# determine if any section types fall too far away from the standard deviation
		#Unfinished
	

	def getSectionMissInfo(self, type):

		if type == WRITING_TYPE:
			size = WRITING_TYPES
			tag = "W"
		else if type == MATH_TYPE:
			size == MATH_TYPES
			tag = "M"
		else if type == READING_TYPE
			size == READING_TYPES
			tag = "R"

		outputDict = {}

		for data in dataSet:
			for i in range(1, size + 1):
				fulltag = tag + str(i)
				questionStats = data[type].stats[fulltag]
				numberMissed = questionStats.m
				totalNumber = questionsStats.t 
				if fulltag is in outputDict.keys():
					outputDict[fulltag].append(numberMissed/totalNumber)
				else:
					intoDict = []
					intoDict.append(numberMissed/totalNumber)
					outputDict[fulltag] = intoDict










		