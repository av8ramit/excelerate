####################################################################################################################################################  
#                                                                                                                                                  #
# This file has been generated by Amit Patankar:                                                                                                   #
#     Created by              : amit.patankar                                                                                                      #    
#     Created on              : 08-08-2013                                                                                                         #
#     Directory               : /Desktop/                                                                                                          #
#     Purpose                 : This file represents a data graph.                                                                                 #
#                                                                                                                                                  #
#################################################################################################################################################### 

from Values import *

class Graph(object):

    def __init__(self, points):
        self.g = []
        self.data = points
        self.min = min(points)
        self.max = max(points)
        self.lower_level = 0
        self.upper_mid_level = 800
        self.lower_mid_level = 1600
        self.upper_level = 2400
        self.spread = self.max - self.min
        self.spread_level = 0
        self.line_length = 55

        #spread level calculation
        if self.spread < 100:
            self.spread_level = 1
        elif self.spread < 1000:
            self.spread_level = 2
        else:
            self.spread_level = 3

        self.round_spread()

        for y in range(0,22):
            for x in range(0,51):
                if x == 0:
                    if y == 0:
                        self.g += (self.pad(min(self.upper_level,9999)) + "|")
                    elif y == 7:
                        self.g += (self.pad(self.upper_mid_level) + "|")
                    elif y == 14:
                        self.g += (self.pad(self.lower_mid_level) + "|")
                    elif y == 21:
                        self.g += (self.pad(self.lower_level) + "|")         
                    else:
                        self.g += "    |"
                elif x == 50:
                    self.g += "\n"
                else:
                    self.g += " "
        self.g += ("    |")
        for i in range(0,51):
            self.g += "_"
        self.g += endl

        self.place_points()


    def round_spread(self):
        self.lower_level = self.min / pow(10, self.spread_level) * pow(10, self.spread_level)
        self.upper_level = (self.max + pow(10, self.spread_level) - 1) / pow(10, self.spread_level) * pow(10, self.spread_level)
        self.upper_mid_level = (2 * (self.spread / 3)) + self.lower_level
        self.lower_mid_level = (self.spread / 3) + self.lower_level

    def pad(self, n):
        l = len(str(n))
        return (SPACE * (4 - l)) + str(n)

    def place_points(self):
        increment = 50 / len(self.data)
        current_index = 5
        for point in self.data:
            y = self.get_y(point)
            self.g[(y * self.line_length) + current_index] = "*"
            current_index += increment


    def get_y(self, point):
        row = 21
        current = self.lower_level
        increment = self.spread / 21
        while (point > current):
            row -= 1
            current += increment
            if (current >= self.upper_level):
                return 0
        return row

    def html(self):
        output = ""
        lines = str(self).split(endl)
        print self.data
        print self
        for line in lines:
            #line = line.replace(' ', '&nbsp')
            output += ("<p>" + line + "</p>" + endl)
        return output



    def __str__(self):
        return ''.join(self.g)