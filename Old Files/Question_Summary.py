####################################################################################################################################################  
#  																																				   #
# This file has been generated by Amit Patankar:  																								   #
#     Created by              : amit.patankar																									   #	
#     Created on              : 11-07-2013																										   #
#     Directory               : /Desktop/																								           #
#     Purpose		    	  : This structure is a question summaryself.							   							   	   	 		   #
#  													   																							   #
#################################################################################################################################################### 

import sys
sys.path.append('../')
from Values import *

class Test_Summary(object):

		#This is the default constructor with all variables defined.
	def __init__(self, test_id):
		self.id = test_id
		self.reports = {}
		self.reports[MATH_TYPE] = Question_Summary(test_id, MATH_TYPE)
		self.reports[READING_TYPE] = Question_Summary(test_id, READING_TYPE)
		self.reports[WRITING_TYPE] = Question_Summary(test_id, WRITING_TYPE)


	def get_summary(self, section_type):
		return self.reports[section_type]

	def __str__(self):
		output = ("\nWRITING:" + endl)
		current_type = WRITING_TYPE
		output += str(self.get_summary(current_type))
		output += ("\nMATH:" + endl)
		current_type = MATH_TYPE
		output += str(self.get_summary(current_type))
		output += ("\nREADING:" + endl)
		current_type = READING_TYPE
		output += str(self.get_summary(current_type))
		return output

#Base Scored Section Class
class Section_Summary(object):

		#This is the default constructor with all variables defined.
	def __init__(self, test_id, section_type):
		self.id = test_id
		self.type = section_type
		self.qa = 0
		self.qm = 0
		self.qb = 0
		self.incorrect_questions = []

	def raw_score(self):
		return self.qa - self.qm/4 - round_rem(float(self.qm)/4)

	def size(self):
		return self.qa + self.qm + self.qb

	def add_miss(self):
		self.qm += 1

	def add_blank(self):
		self.qb += 1

	def add_answered(self):
		self.qa += 1

	def __str__(self):
		output = ("QA: " + str(self.qa) + endl)
		output += ("QM: " + str(self.qm) + endl)
		output += ("QB: " + str(self.qb) + endl)
		output += ("Raw Score: " + str(self.raw_score()) + endl)
		output += ("Missed Questions:" + str(self.incorrect_questions) + endl)
		return output