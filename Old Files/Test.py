####################################################################################################################################################  
#  																																				   #
# This file has been generated by Amit Patankar:  																								   #
#     Created by              : amit.patankar																									   #	
#     Created on              : 11-07-2013																										   #
#     Directory               : /Desktop/																								           #
#     Purpose		    	  : This structure holds the attributes of each section in a text.							   						   #
#  													   																							   #
#################################################################################################################################################### 

import sys
import csv
from Values import *
from Answer import *

#Test Class
class Test(object):

	#This is the default constructor with all variables defined.
	def __init__(self, month, year):
		self. month = month
		self.year = year
		self.sections = {}

	def __init__(self, test_id):
		t = test_id.split("_")
		self.month = t[0]
		self.year = t[1]
		self.sections = {}

		key = {}
		with open(test_id + DIR_SEP + KEYFILE, 'rU') as f:
		    reader = csv.reader(f)
		    for row in reader:
		    	if row != KEY_VECTOR:
		    		key[row[0]] = (row[KEY_TYPE],row[KEY_SIZE])
		for number in key.keys():
			if number == '1': #essay
				es = Essay_Section(self)
				self.add_section(es)
			elif key[number][1] == '0': #trial
				ts = Trial_Section(self, int(number))
				self.add_section(ts)
			else: #real
				s = Section(self, int(number), int(key[number][0]))
				s.parse_questions(test_id + DIR_SEP + "Section " + number + ".csv")
				self.add_section(s)

	#This selects the correct section.
	def get_section(self, section_number):
		if (section_number > SECTION_COUNT or section_number < 1):
			print ("Error: Invalid section index. Indexes are from 1-10.")
			return
		return self.sections[section_number]

	def add_section(self, section):
		self.sections[section.section_number] = section

	def get_id(self):
		return str(self.month) + FIELD_SEP + str(self.year)

	def make_answer_sheet(test_id):
		filename = test_id
		lines = []

		label_vector = "Number:,Answer:\n"
		lines.append(test_id + " Answer Sheet\n\n")
		lines.append(label_vector)

		with open(filename + DIR_SEP + KEYFILE, 'rU') as f:
		    reader = csv.reader(f)
		    for row in reader:
				if row != KEY_VECTOR:

					lines.append("Section " + str(row[0]) + ":" + endl)
					for j in range(1,int(row[2]) + 1):
						lines.append(str(j) + ",?")
						lines.append(endl)

		FILE = open(test_id + ".csv", "w")
		FILE.writelines(lines)
		FILE.close() 

	def grade(self, answered_test):
		report = Answer_Report(self.get_id())
		assert (answered_test.id == self.get_id())
		for i in range(1,11):
			print ("Grading Section " + str(i))
			answered_section = answered_test.sections[i]
			answer_key = self.get_section(i)
			current_type = answer_key.type
			if current_type > MATH_TYPE:
				continue
			assert (answered_section.size() == answer_key.size())
			for j in range(1,answered_section.size()+1):
				attempt = answered_section.questions[j].answer
				answer = answer_key.get_question(j).answer
				if attempt == '?':
					report.get_summary(current_type).add_blank()
					report.get_summary(current_type).incorrect_questions.append((answer_key.get_question(j).get_id(),attempt))
				elif attempt == answer:
					report.get_summary(current_type).add_answered()
				else:
					report.get_summary(current_type).add_miss()
					report.get_summary(current_type).incorrect_questions.append((answer_key.get_question(j).get_id(),attempt))
		return report

#Base Section Class
class Section(object):

	#This is the default constructor with all variables defined.
	def __init__(self, test, index, section_type):
		self.test = test
		self.section_number = index
		self.type = section_type
		self.questions = {}
		self.is_trial = False

	def add_question(self, question):
		self.questions[question.number] = question

	#This selects the correct section.
	def parse_questions(self, filename):
		with open(filename, 'rU') as f:
		    reader = csv.reader(f)
		    for row in reader:
		    	if row != LABEL_VECTOR:
		        	q = Question(self, row)
		        	self.add_question(q)

	def get_question(self, index):
		if (index <= 0 or index >= self.size):
			print ("Error: Not a valid question number")
			return
		return self.questions[index]

	def get_id(self):
		return self.test.get_id() + FIELD_SEP + str(self.section_number)


	def size(self):
		return len(self.questions)

#Trial Section Class for CollegeBoard Experimentals
class Trial_Section(Section):

	#This is the default constructor with all variables defined.
	def __init__(self, test, index):
		self.test = test
		self.section_number = index
		self.is_trial = True
		self.type = TRIAL_TYPE
		self.questions = {}

#Trial Essay Section Always #1
class Essay_Section(Section):

	#This is the default constructor with all variables defined.
	def __init__(self, test):
		self.test = test
		self.section_number = ESSAY_SECTION_INDEX
		self.type = ESSAY_TYPE
		self.is_trial = False
		self.questions = {}

#Question Class
class Question(object):

	#This is the default constructor with all variables defined.
	def __init__(self, section, number, answer, difficulty, range_r, question_type):
		self.section = section
		self.number = number
		self.answer = answer
		self.difficulty = difficulty
		self.range = range_r
		self.type = question_type

	#MAKE A CONSTRUCTOR THAT CONSTRUCTS OUT OF ARRAY

	#This is the default constructor with all variables defined.
	def __init__(self, section, array):
		if len(array) != PARSED_ARRAY_SIZE:
			print ("Error: Invalid line in CSV")
			print (array)
			return

		self.section = section
		self.number = int(array[NUMBER_INDEX])
		self.answer = array[ANSWER_INDEX]
		self.difficulty = int(array[DIFFICULTY_INDEX])
		self.range = array[RANGE_INDEX]
		self.type = array[TYPE_INDEX]

	def get_id(self):
		return self.section.get_id() + FIELD_SEP + str(self.number)
